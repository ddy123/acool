<?php
/**
 * Created by PhpStorm.
 * User: burn
 * Date: 2017/3/29
 * Time: 下午12:40
 */

namespace Admin\Controller;

use Think\AjaxPage;

class UserController extends BaseController
{
	public function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		
//		if(cookie('uid'))
//		{
//			if(ACTION_NAME == 'ajaxChannelPayLogList')
//			{
//				if(!isset($_COOKIE['permissions']))
//				{
//					$this->display('Admin/login');
//				}
//			}
//			else if(cookie('permissions') != 1)
//			{
//				$this->display('Admin/login');
//			}
//		}
		
		if(cookie('uid') == 0 || !isset($_COOKIE['uid']))
		{
			$this->display('Admin/login');
		}
	}
	
	public function userList()
	{
		$this->display();
	}
	
	public function ajaxUserList()
	{
		if(cookie('uid'))
		{
			$keyWord = I('key_word');
			
			$condition['name'] = array('like', '%' . $keyWord . '%');
			
			$count = M('distribution_system_users')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_system_users.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$userList = M('distribution_system_users')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($userList as $key => $value)
			{
				$userList[$key]['lastlogin'] = date('Y-m-d H:i:s',$value['lastlogin']);
			}
			
			$this->assign('userlist', $userList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}
	
	public function payLogList()
	{
		$uid = I('get.id');
		
		if($uid)
		{
			$this->assign('uid',$uid);
		}
		
		$this->display();
	}
	
	public function ajaxPayLogList()
	{
		if(cookie('uid'))
		{
			$keyWord = I('key_word');
			
			$uid     = I('id');
			
			if($uid)
			{
				$condition['buyid'] = $uid;
			}
			else
			{
				$condition['buyname'] = array('like', '%' . $keyWord . '%');
			}
			
			if(cookie('uid'))
			{
				$count = M('distribution_pay_paylog')->where($condition)->count();
				
				$Page = new AjaxPage($count, 10);
				
				$show = $Page->show();
				
				$orderStr = C('DB_PREFIX') . "distribution_pay_paylog.{$_POST['orderby1']} {$_POST['orderby2']}";
				
				$payLogList = M('distribution_pay_paylog')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
				
				foreach($payLogList as $key => $item)
				{
					$payLogList[$key]['buytime'] = date('Y-m-d H:i:s', $item['buytime']);
					
					if($item['payflag'])
					{
						$payLogList[$key]['flag'] = '已完成';
					}
					else
					{
						$payLogList[$key]['flag'] = '未完成';
					}
					
					$userInfo = M('distribution_system_users')->where(array('uid' => $item['buyid']))->find();
					
					$payLogList[$key]['nickname'] = $userInfo['name'];
					
					$channelInfo = $this->getChannelInfo($item['channelid']);
					
					$payLogList[$key]['channelname'] = $channelInfo['channelname'];
					
					$payLogList[$key]['channeltype'] = $channelInfo['channeltype'];
				}
				
				$this->assign('payloglist', $payLogList);
				
				$this->assign('page', $show);
				
				$this->display();
			}
			else
			{
				$this->display('Admin/Login');
			}
		}
	}
	
	private function getChannelInfo($channelID)
	{
		$channelInfo = M('distribution_channels')->where(array('channelid' => $channelID))->find();
		
		if(!$channelInfo)
		{
			$channelInfo['channelname'] = '官方渠道';
			
			$channelInfo['channeltype'] = '暂无统计';
		}
		
		return $channelInfo;
	}
	
	public function delPayLog()
	{
		if(cookie('uid') && cookie('permissions') == 1)
		{
			$id   = I('id');
			
			$flag = M('distribution_pay_paylog')->where(array('payid' => $id))->delete();
			
			if($flag)
			{
				$return_arr = array
				(
					'status' => '1',
					'msg'    => '删除成功',
					'data'   => array('url' => U('User/payLogList'))
				);
			}
			else
			{
				$return_arr = array
				(
					'status' => '0',
					'msg'    => '删除失败',
					'data'   => array('url' => U('User/payLogList'))
				);
			}
			
			$this->ajaxReturn(json_encode($return_arr));
		}
	}
	
	public function edit()
	{
		$uid  = I('id');
		
		$user = M('distribution_system_users')->where(array('uid' => $uid))->find();
		
		$user['regtime']   = date('Y-m-d H:i:s',$user['regdate']);
		
		$user['lastlogin'] = date('Y-m-d H:i:s',$user['lastlogin']);
		
		$this->assign('user',$user);
		
		if(($_GET['is_ajax'] == 1) && IS_POST)
		{
			$uid   = trim(I('uid'));
			
			$egold = trim(I('egold'));
			
			$user = M('distribution_system_users')->where(array('uid' => $uid))->find();
			
			$flag = strpos($egold,'-');
			
			if($flag !== false)
			{
				$data['egold'] = $user['egold'] - $egold;
			}
			else
			{
				$data['egold'] = $user['egold'] + $egold;
			}
			
			$flag = M('distribution_system_users')->where(array('uid' => $uid))->save($data);
			
			if($flag)
			{
				$payLogData['siteid']      = 0;
				$payLogData['buytime']     = time();
				$payLogData['rettime']     = 0;
				$payLogData['buyid']       = $uid;
				$payLogData['buyname']     = $user['uname'];
				$payLogData['buyinfo']     = '';
				$payLogData['money']       = $egold / 100;
				$payLogData['retserialno'] = '';
				$payLogData['retaccount']  = '';
				$payLogData['retinfo']     = '';
				$payLogData['masterid']    = 0;
				$payLogData['mastername']  = '';
				$payLogData['masterinfo']  = '';
				$payLogData['note']        = '';
				$payLogData['payflag']     = 1;
				$payLogData['egold']       = $data['egold'];
				$payLogData['paytype']     = "后台人工充值";
				$payLogData['moneytype']   = 0;
				$payLogData['egoldtype']   = 0;
				$payLogData['channelid']   = 0;
				$payLogData['channeltype'] = 0;
				
				$note = sprintf('后台人工将修改 %s 的余额修改为%s', $user['uname'], $data['egold']);
				$payLogData['note']       = $note;
				
				M('distribution_pay_paylog')->add($payLogData);
				
				file_put_contents('$M(\'distribution_pay_paylog\').txt',print_r(M('distribution_pay_paylog'),true));
				
				$return_arr = array
				(
					'status' => '1',
					'msg'    => '保存成功',
					'data'   => array('url' => U('User/userList'))
				);
			}
			else
			{
				$return_arr = array
				(
					'status' => '0',
					'msg'    => '保存失败',
					'data'   => array('url' => U('Channel/userList'))
				);
			}
			
			$this->ajaxReturn(json_encode($return_arr));
		}
		
		$this->display();
	}
	
	public function delUser()
	{
		if(cookie('uid') && cookie('permissions') == 1)
		{
			$id   = I('id');
			
			$flag = M('distribution_system_users')->where(array('uid' => $id))->delete();
			
			if($flag)
			{
				$return_arr = array
				(
					'status' => '1',
					'msg'    => '删除成功',
					'data'   => array('url' => U('User/payLogList'))
				);
			}
			else
			{
				$return_arr = array
				(
					'status' => '0',
					'msg'    => '删除失败',
					'data'   => array('url' => U('User/payLogList'))
				);
			}
			
			$this->ajaxReturn(json_encode($return_arr));
		}
	}
	
	public function buyInfo()
	{
		$uid = I('id');
		
		$userInfo = M('distribution_system_users')->where(array('uid' => $uid))->field('uid,uname,name')->find();
		
		$this->assign('user',$userInfo);
		
		$this->display();
	}
	
	public function ajaxBuyInfo()
	{
		if(cookie('uid'))
		{
			$keyWord = I('post.key_word');
			
			$uid     = I('get.id');
			
			$condition2['userid']      = $uid;
			
			$condition1['obookname']   = array('like', '%' . $keyWord . '%');
			
			$condition1['chaptername'] = array('like', '%' . $keyWord . '%');
			
			$condition1['_logic']      = 'OR';
			
			$condition                 = array($condition1,$condition2);
			
			$condition['_logic']       = 'AND';
			
			$count = M('distribution_obook_obuyinfo')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_obook_obuyinfo.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$buyInfoList = M('distribution_obook_obuyinfo')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($buyInfoList as $key => $item)
			{
				$buyInfoList[$key]['buytime'] = date('Y-m-d H:i:s', $item['buytime']);
				
				$channelInfo = $this->getChannelInfo($item['channelid']);
				
				$buyInfoList[$key]['channelname'] = $channelInfo['channelname'];
				
				$buyInfoList[$key]['channeltype'] = $channelInfo['channeltype'];
			}
			
			$this->assign('buyinfolist', $buyInfoList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}
	
	/**
	 * 渠道中用户的充值记录
	 */
	public function channelPayLogList()
	{
		$this->display();
	}
	
	public function ajaxChannelPayLogList()
	{
		if(cookie('permissions') == 0)
		{
			if(cookie('channelname'))
			{
				$keyWord   = cookie('channelname');
				
				$isChannel = 1;
				
				$this->assign('ischannel',$isChannel);
			}
			else
			{
				
				$Page = new AjaxPage(0,10);
				
				$show = $Page->show();
				
				$channelList = array();
				
				$this->assign('channelList',$channelList);
				
				$this->assign('page',$show);// 赋值分页输出
				
				$this->display();
				
				exit();
			}
		}
		else
		{
			$keyWord = I('key_word');
		}
		
		if(cookie('uid'))
		{
			$count       = M('distribution_channels')->where(1)->count();
			
			$Page        = new AjaxPage($count,10);
			
			$show        = $Page->show();
			
			$channelList = M('distribution_channels')->where(array('channelname' => array('like','%' . $keyWord . '%')))->limit($Page->firstRow . ',' . $Page->listRows)->select();
			
			$channelList = convert_arr_key($channelList,'channelid');
			
			foreach($channelList as $key => $value)
			{
				$channelList[$key] = $this->getChannelPayLog($value['channelid']);
				
				$channelList[$key]['paylogsum']   = $this->getChannelPayLogSum($value['channelid']);
				
				$channelList[$key]['unpaylogsum'] = $this->getChannelUnPayLogSum($value['channelid']);
				
				$channelList[$key]['todaypaylogsum']   = $this->getChannelTodayPayLogSum($value['channelid']);
				
				$channelList[$key]['todayunpaylogsum'] = $this->getChannelTodayUnPayLogSum($value['channelid']);
			}
			
			$this->assign('channelList',$channelList);
			
			$this->assign('page',$show);// 赋值分页输出
			
			$this->display();
		}
	}
	
	/**
	 * 根据$channelID获取渠道的结算信息
	 *
	 * @param $channelID
	 * @return mixed
	 */
	private function getChannelPayLog($channelID)
	{
		$channelPayLog = M('distribution_pay_log')->where(array('channelid' => $channelID))->find();
		
		$channelInfo   = M('distribution_channels')->where(array('channelid' => $channelID))->find();
		
		$convertProportion = C('CONVERTIBLE_PROPORTION');//兑换比例
		
		$channelPayInfo['channelid']   = $channelInfo['channelid'];
		
		$channelPayInfo['channelname'] = $channelInfo['channelname'];
		
		$channelPayInfo['summoney']    = ($channelPayLog['paidmoney'] + $channelPayLog['remainmoney']) * $convertProportion;
		
		$channelPayInfo['remainmoney'] = $channelPayLog['remainmoney'] * $convertProportion * $channelInfo['proportion'];
		
		$channelPayInfo['proportion']  = $channelInfo['proportion'];
		
		$channelPayInfo['paidmoney']   = $channelPayLog['paidmoney'] ? $channelPayLog['paidmoney'] * $convertProportion : 0;
		
		return $channelPayInfo;
	}
	
	private function getUserSumByChannleID($channelID)
	{
		$count = M('distribution_system_users')->where(array('channelid' => $channelID))->count();
		
		return $count;
	}
	
	private function getChannelPayLogSum($channelID)
	{
		$condition['channelid'] = $channelID;
		
		$condition['payflag']   = 1;
		
		$count = M('distribution_pay_paylog')->where($condition)->count();
		
		return $count;
	}
	
	private function getChannelUnPayLogSum($channelID)
	{
		$condition['channelid'] = $channelID;
		
		$condition['payflag']   = 0;
		
		$count = M('distribution_pay_paylog')->where($condition)->count();
		
		return $count;
	}
	
	private function getChannelTodayPayLogSum($channelID)
	{
		$todayTime              = strtotime(date('Y-m-d'));
		
		$condition['buytime']   = array('egt',$todayTime);
		
		$condition['channelid'] = $channelID;
		
		$condition['payflag']  = 1;
		
		$count = M('distribution_pay_paylog')->where($condition)->count();
		
		return $count;
	}
	
	private function getChannelTodayUnPayLogSum($channelID)
	{
		$todayTime              = strtotime(date('Y-m-d'));
		
		$condition['buytime']   = array('egt',$todayTime);
		
		$condition['channelid'] = $channelID;
		
		$condition['payflag']  = 0;
		
		$count = M('distribution_pay_paylog')->where($condition)->count();
		
		return $count;
	}
	
	public function channelPayLogListByChannleID()
	{
		$channelID   = I('id');
		
		$channelInfo = M('distribution_channels')->where(array('channelid' => $channelID))->find();
		
		$this->assign('channel',$channelInfo);
		
		$this->display();
	}
	
	public function ajaxChannelPayLogListByChannleID()
	{
		if(cookie('uid'))
		{
			$keyWord = I('post.key_word');
			
			$id      = I('get.id');
			
			$condition['buyname'] = array('like', '%' . $keyWord . '%');
			
			$condition['channelid'] = $id;
			
			$count = M('distribution_pay_paylog')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_pay_paylog.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$payLogList = M('distribution_pay_paylog')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($payLogList as $key => $item)
			{
				$payLogList[$key]['buytime'] = date('Y-m-d H:i:s', $item['buytime']);
				
				if($item['payflag'])
				{
					$payLogList[$key]['flag'] = '已完成';
				}
				else
				{
					$payLogList[$key]['flag'] = '未完成';
				}
				
				$userInfo = M('distribution_system_users')->where(array('uid' => $item['buyid']))->find();
				
				$payLogList[$key]['nickname'] = $userInfo['name'];
				
				$channelInfo = $this->getChannelInfo($item['channelid']);
				
				$payLogList[$key]['channelname'] = $channelInfo['channelname'];
				
				$payLogList[$key]['channeltype'] = $channelInfo['channeltype'];
			}
			
			$this->assign('payloglist', $payLogList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}
	
	/*
	 * 渠道中用户列表
	 */
	public function channelUserList()
	{
		$this->display();
	}
	
	public function ajaxChannelUserList()
	{
		if(cookie('permissions') == 0)
		{
			if(cookie('channelname'))
			{
				$keyWord   = cookie('channelname');
				
				$isChannel = 1;
				
				$this->assign('ischannel',$isChannel);
			}
			else
			{
				$channelList = array();
				
				$Page        = new AjaxPage(0,10);
				
				$show        = $Page->show();
				
				$this->assign('channelList',$channelList);
				
				$this->assign('page',$show);// 赋值分页输出
				
				$this->display();
				
				exit();
			}
		}
		else
		{
			$keyWord = I('key_word');
		}
		
		if(cookie('uid'))
		{
			$count       = M('distribution_channels')->where(1)->count();
			
			$Page        = new AjaxPage($count,10);
			
			$show        = $Page->show();
			
			$channelList = M('distribution_channels')->where(array('channelname' => array('like','%' . $keyWord . '%')))->limit($Page->firstRow . ',' . $Page->listRows)->select();
			
			$channelList = convert_arr_key($channelList,'channelid');
			
			foreach($channelList as $key => $value)
			{
				$channelList[$key]                 = $this->getChannelPayLog($value['channelid']);
				
				$channelList[$key]['usersum']      = $this->getUserSumByChannleID($value['channelid']);
				
				$channelList[$key]['todayusersum'] = $this->getTodayUserSumByChannleID($value['channelid']);
			}
			
			$this->assign('channelList',$channelList);
			
			$this->assign('page',$show);// 赋值分页输出
			
			$this->display();
		}
	}
	
	public function getTodayUserSumByChannleID($channelID)
	{
		$todayTime              = strtotime(date('Y-m-d'));
		
		$condition['regdate']   = array('egt',$todayTime);
		
		$condition['channelid'] = $channelID;
		
		$count = M('distribution_system_users')->where($condition)->count();
		
		return $count;
	}
	
	public function channelUserListByChannleID()
	{
		$channelID   = I('id');
		
		$channelInfo = M('distribution_channels')->where(array('channelid' => $channelID))->find();
		
		$this->assign('channel',$channelInfo);
		
		$this->display();
	}
	
	public function ajaxChannelUserListByChannelID()
	{
		if(cookie('uid'))
		{
			$keyWord   = I('key_word');
			
			$channelID = I('get.id');
			
			$condition['name'] = array('like', '%' . $keyWord . '%');
			
			$condition['channelid'] = $channelID;
			
			$count = M('distribution_system_users')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_system_users.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$userList = M('distribution_system_users')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($userList as $key => $value)
			{
				$userList[$key]['lastlogin'] = date('Y-m-d H:i:s',$value['lastlogin']);
			}
			
			$this->assign('userlist', $userList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}
	
	public function userAccessLogList()
	{
		$this->display();
	}
	
	public function ajaxUserAccessLogList()
	{
		if(cookie('uid'))
		{
			$keyWord   = I('key_word');
			
			$condition['uname'] = array('like', '%' . $keyWord . '%');
			
			$count = M('distribution_user_access_log')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_user_access_log.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$logList = M('distribution_user_access_log')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($logList as $key => $value)
			{
				$logList[$key]['lastlogin'] = date('Y-m-d H:i:s',$value['accesstime']);
				
				$user = M('distribution_system_users')->where(array('uid' => $value['uid']))->find();
				
				$logList[$key]['name'] = $user['name'];
				
				$channelInfo = $this->getChannelInfo($value['channelid']);
				
				$logList[$key]['channelname'] = $channelInfo['channelname'];
				
				$logList[$key]['channeltype'] = $channelInfo['channeltype'];
			}
			
			$this->assign('loglist', $logList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}

	public function channelUserAccessLog()
	{
		$this->display();
	}
	
	public function ajaxChannelUserAccessLog()
	{
		if(cookie('permissions') == 0)
		{
			$keyWord   = cookie('channelname');
			
			$isChannel = 1;
			
			$this->assign('ischannel',$isChannel);
		}
		else
		{
			$keyWord = I('key_word');
		}
		
		if(cookie('uid'))
		{
			$count       = M('distribution_channels')->where(1)->count();
			
			$Page        = new AjaxPage($count,10);
			
			$show        = $Page->show();
			
			$channelList = M('distribution_channels')->where(array('channelname' => array('like','%' . $keyWord . '%')))->limit($Page->firstRow . ',' . $Page->listRows)->select();
			
			$channelList = convert_arr_key($channelList,'channelid');
			
			foreach($channelList as $key => $value)
			{
				$channelList[$key]['accesssum'] = M('distribution_user_access_log')->where(array('channelid' => $value['channelid']))->count();
				
				$channelList[$key]['todayaccesssum'] = $this->getTodayAccessSumByChannleID($value['channelid']);
			}
			
			$this->assign('channelList',$channelList);
			
			$this->assign('page',$show);// 赋值分页输出
			
			$this->display();
		}
	}
	
	private function getTodayAccessSumByChannleID($channelID)
	{
		$todayTime               = strtotime(date('Y-m-d'));
		
		$condition['accesstime'] = array('egt',$todayTime);
		
		$condition['channelid']  = $channelID;
		
		$count = M('distribution_user_access_log')->where($condition)->count();
		
		return $count;
	}

	public function channelUserAccessLogByChannleID()
	{
		$channelID   = I('id');
		
		$channelInfo = M('distribution_channels')->where(array('channelid' => $channelID))->find();
		
		$this->assign('channel',$channelInfo);
		
		$this->display();
	}
	
	public function ajaxChannelUserAccessLogByChannleID()
	{
		if(cookie('uid'))
		{
			$keyWord   = I('key_word');
			
			$channelID = I('get.id');
			
			$condition['uname']     = array('like', '%' . $keyWord . '%');
			
			$condition['channelid'] = $channelID;
			
			$count = M('distribution_user_access_log')->where($condition)->count();
			
			$Page = new AjaxPage($count, 10);
			
			$show = $Page->show();
			
			$orderStr = C('DB_PREFIX') . "distribution_user_access_log.{$_POST['orderby1']} {$_POST['orderby2']}";
			
			$logList = M('distribution_user_access_log')->where($condition)->limit($Page->firstRow . ',' . $Page->listRows)->order($orderStr)->select();
			
			foreach($logList as $key => $value)
			{
				$logList[$key]['accesstime'] = date('Y-m-d H:i:s',$value['accesstime']);
			}
			
			$this->assign('loglist', $logList);
			
			$this->assign('page', $show);
			
			$this->display();
		}
		else
		{
			$this->display('Admin/Login');
		}
	}
}